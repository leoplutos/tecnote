# 构建Node.js开发环境
# 使用NeoVim编辑器

# 基础镜像-Deiban11 Bullseye
# 开发环境使用Bun，生成环境需要使用Node.js
FROM oven/bun:slim

# [参数传递]
# 在官方镜像里面，已经存在了1000/1000(bun/bun)，所以直接使用这个用户
ARG ARG_USER_ID=1000
ARG ARG_USER_NAME="bun"
ARG ARG_USER_PWD="123456"
ARG ARG_GROUP_ID=1000
ARG ARG_GROUP_NAME="bun"
# Github下载地址
ARG ARG_GITHUB_URL="https://bgithub.xyz"
ARG ARG_CONTAINER_NAME="bun_dev"

# 设定环境变量
# 在nvim中判断用
ENV DOCKER_CONTAINER="true"
ENV DOCKER_CONTAINER_NAME=$ARG_CONTAINER_NAME
ENV DOCKER_CONTAINER_USER=$ARG_USER_NAME
ENV DOCKER_CONTAINER_GROUP=$ARG_GROUP_NAME
# Github下载地址
ENV GITHUB_URL="https://bgithub.xyz"
ENV GITHUB_CONFIG_URL=$ARG_GITHUB_URL
RUN echo "Dev User/Group ID is : ${ARG_USER_ID}/${ARG_GROUP_ID}"
RUN echo "Dev User/Group NAME is : ${ARG_USER_NAME}/${ARG_GROUP_NAME}"
RUN echo "Github URL is : ${GITHUB_URL}"
RUN echo "Github Config URL is : ${GITHUB_CONFIG_URL}"

# 设定Debian11镜像仓库为国内源
RUN set -eux && sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list

# 创建开发用户（避免数据卷为权限为root）
# 在官方镜像里面，已经存在了1000/1000(bun/bun)，所以直接使用这个用户
# RUN groupadd -r -g ${ARG_GROUP_ID} ${DOCKER_CONTAINER_GROUP}
# RUN useradd -r -g ${DOCKER_CONTAINER_GROUP} -u ${ARG_USER_ID} -s /bin/bash ${DOCKER_CONTAINER_USER}
# 设定用户密码
RUN echo "${DOCKER_CONTAINER_USER}:${ARG_USER_PWD}" | chpasswd
# 设定用户默认Shell为bash
RUN chsh -s /bin/bash ${DOCKER_CONTAINER_USER}

# 创建应用路径
RUN mkdir /workspace
# 设置工作目录
WORKDIR /workspace

# 安装 所需内容
RUN apt -qq update -y && apt -qq upgrade -y
RUN apt install -qq sudo curl git gosu zip unzip xsel xclip ripgrep fd-find build-essential -y
# 在Debian中fd的二进制名为fdfind（因为fd已被另一个包使用），所以这里做一个软链接
RUN ln -s $(which fdfind) /usr/local/bin/fd
# 安装Node.js 20 和 npm
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
RUN apt-get install -y nodejs
# 安装neovim
#RUN curl -Lo nvim.tar.gz "${GITHUB_URL}/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz"
RUN curl -Lo nvim-linux64.tar.gz "${GITHUB_URL}/neovim/neovim/releases/download/v0.10.1/nvim-linux64.tar.gz"
RUN tar xzvf nvim-linux64.tar.gz
RUN mv nvim-linux64 /usr/local/nvim
RUN rm nvim-linux64.tar.gz
RUN ln -s /usr/local/nvim/bin/nvim /usr/bin/nvim
# 安装lazygit
#RUN LAZYGIT_VERSION=$(curl -s "https://api.kkgithub.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
RUN curl -Lo lazygit.tar.gz "${GITHUB_URL}/jesseduffield/lazygit/releases/latest/download/lazygit_0.44.1_Linux_x86_64.tar.gz"
RUN tar xf lazygit.tar.gz lazygit
RUN install lazygit /usr/local/bin
RUN rm lazygit.tar.gz
RUN rm lazygit
# 安装 Buf
RUN curl -sSL "${GITHUB_URL}/bufbuild/buf/releases/download/v1.42.0/buf-$(uname -s)-$(uname -m)" -o "/usr/local/bin/buf"
RUN chmod +x "/usr/local/bin/buf"

# 将用户添加到 sudo 组以便可以运行 sudo 命令
RUN usermod -aG sudo ${DOCKER_CONTAINER_USER}

# 修改权限
RUN mkdir -p /home/${DOCKER_CONTAINER_USER}/.bun
RUN chown -R $DOCKER_CONTAINER_USER:$DOCKER_CONTAINER_GROUP /workspace
RUN chown -R $DOCKER_CONTAINER_USER:$DOCKER_CONTAINER_GROUP /home/${DOCKER_CONTAINER_USER}/.bun
RUN chown -R $DOCKER_CONTAINER_USER:$DOCKER_CONTAINER_GROUP /home/${DOCKER_CONTAINER_USER}/app

# 切换用户
USER ${DOCKER_CONTAINER_USER}

# 设定
# 为开发用户设定npm国内源
RUN npm config set registry https://registry.npmmirror.com/

# git设定
RUN git config --global user.name "yourname"
RUN git config --global user.email "your@email.com"
RUN git config --global gui.encoding utf-8
RUN git config --global color.ui true
RUN git config --global core.autoCRLF false
RUN git config --global core.ignorecase false
RUN git config --global core.sparseCheckout true
RUN git config --global credential.helper store

# neovim配置一键安装
ENV GITHUB_RAW_URL=https://raw.bgithub.xyz
# ENV GITHUB_RAW_URL=https://raw.bgithub.xyz
RUN set -eux && curl -fsSL ${GITHUB_RAW_URL}/leoplutos/tecnote/refs/heads/master/Linux/lazy_nvim_setting.sh | bash

WORKDIR /workspace

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'export PS1="${PS_GREEN}[${DOCKER_CONTAINER_NAME}]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'alias lg="lazygit"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'alias vi="nvim"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc
RUN echo 'alias vim="nvim"' >> /home/${DOCKER_CONTAINER_USER}/.bashrc

# 切换用户
USER root

# 设置默认入口命令
# ENTRYPOINT ["/bin/bash"]
# 使用gosu切换到开发用户
ENTRYPOINT ["sh", "-c", "exec gosu ${DOCKER_CONTAINER_USER} /bin/bash"]
