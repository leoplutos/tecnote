# Nodejs 版本
# slim 镜像一般都基于 Debian 和 glibc，删除了许多非必需的软件包，优化了体积
FROM node:20-bookworm-slim

# 设定debian12镜像仓库为国内源
RUN set -eux && sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/debian.sources

# 构建时变量，仅在构建Docker映像期间可用
ARG NODE_ENV=production
ARG registry=https://npmreg.proxy.ustclug.org/

# 创建应用路径
RUN mkdir /opt/app

# 添加curl,netstat
RUN apt-get update
RUN apt-get install curl -y
# RUN apt-get install net-tools -y

# 将本地文件复制到镜像中
# 复制src文件夹
COPY src /opt/app/BackendExpress/src
# 复制package.json,tsconfig.json文件
COPY package.json /opt/app/BackendExpress/package.json
COPY tsconfig.json /opt/app/BackendExpress/tsconfig.json

# 设定镜像
RUN npm config set registry $registry

# 设置工作目录
WORKDIR /opt/app/BackendExpress
# 安装依赖（使用--production=false来强制安装devDependencies中的依赖）
RUN npm install --production=false
# 编译TypeScript
RUN npm run tsc

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 在容器内部设置环境变量（NODE_ENV=production）
ENV NODE_ENV=$NODE_ENV

# 声明容器运行时监听的特定网络端口
EXPOSE 3300

# 指定容器创建时的默认命令
CMD ["node", "dist/App.js"]
