# 多阶段构建

# 阶段1：编译，命名为builder
# 使用Bunjs镜像
FROM oven/bun:alpine AS builder

# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories

# 创建应用路径
RUN mkdir /opt/app

# 将本地文件复制到镜像中
COPY src /opt/app/node_grpc/src
COPY proto /opt/app/node_grpc/proto
COPY buf*.yaml /opt/app/node_grpc
COPY bunfig.toml /opt/app/node_grpc/bunfig.toml
COPY package.json /opt/app/node_grpc/package.json
COPY tsconfig.json /opt/app/node_grpc/tsconfig.json

# 设置工作目录
WORKDIR /opt/app/node_grpc

# 安装依赖
# RUN --mount=type=cache,target=/root/.npm npm install
RUN --mount=type=cache,target=/root/.bun bun install
# 生成存根
RUN bun run generate
# 编译
RUN bun run build

#---------------------------------------------------------------------

# 阶段2：运行
# 使用Nodejs镜像
FROM node:20.16-alpine3.20

# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories

# 创建应用路径
RUN mkdir /opt/app

# 添加bash
RUN apk update --quiet
RUN apk add --no-cache --upgrade bash

# 从阶段1复制编译结果
COPY --from=builder /opt/app/node_grpc/package.json /opt/app/node_grpc/package.json
COPY --from=builder /opt/app/node_grpc/dist/ /opt/app/node_grpc/dist/
COPY --from=builder /opt/app/node_grpc/node_modules/ /opt/app/node_grpc/node_modules/

# 设定环境变量
ENV NODE_ENV="production"

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 设置工作目录
WORKDIR /opt/app/node_grpc

# 声明容器运行时监听的特定网络端口
EXPOSE 50051

# 指定容器创建时的默认命令
CMD ["node", "dist/server.js"]
