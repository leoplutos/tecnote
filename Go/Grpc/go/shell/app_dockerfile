# 多阶段构建

# 阶段1：生成存根，命名为buf_generate
# 使用buf工具链生成gRPC的存根
FROM bufbuild/buf:latest AS buf_generate

# 创建应用路径
RUN mkdir /opt/app

# 将本地文件复制到镜像中
COPY product /opt/app/GoGrpc/product/
COPY proto /opt/app/GoGrpc/proto/
COPY buf*.yaml /opt/app/GoGrpc/
COPY go.mod /opt/app/GoGrpc/

# 设置工作目录
WORKDIR /opt/app/GoGrpc

# 生成存根
RUN buf generate

#---------------------------------------------------------------------

# 阶段2：编译，命名为builder
FROM golang:1.22.5-alpine3.20 AS builder

# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories

# 创建应用路径
RUN mkdir /opt/app

# 设置环境变量来禁用 cgo，这样 Go 就不会使用系统库，使用内置的实现来替代系统库
ENV CGO_ENABLED=0

# Go语言设定
RUN go env -w GO111MODULE=on
RUN go env -w GOPROXY=https://goproxy.cn,direct

# 从阶段1复制内容
COPY --from=buf_generate /opt/app/GoGrpc/ /opt/app/GoGrpc/

# 设置工作目录
WORKDIR /opt/app/GoGrpc

# 开启$GOPATH的缓存，加速下载依赖
RUN --mount=type=cache,target=/go/pkg go mod tidy
# 编译工程
## -ldflags
## -w：去掉 dwarf 调试信息。会减小可执行文件的大小。
## -s：去掉符号表信息。会进一步减小可执行文件的大小。
RUN --mount=type=cache,target=/go/pkg \
    go build -ldflags "-w -s" -o ./bin/gogrpc_server ./product/server/main.go

#---------------------------------------------------------------------

# 阶段3：运行
# 根据需要选择alpine
FROM alpine:3.20

# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories

# 创建应用路径
RUN mkdir /opt/app

# 设置环境变量

# 添加bash，curl
RUN apk update --quiet
RUN apk add --no-cache --upgrade bash curl

# 从阶段1复制编译结果
COPY --from=builder /opt/app/GoGrpc/bin/gogrpc_server /opt/app/GoGrpc/

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 设置工作目录
WORKDIR /opt/app/GoGrpc

# 声明容器运行时监听的特定网络端口
EXPOSE 50051

# 指定容器创建时的默认命令
CMD ["./gogrpc_server"]
