# 多阶段构建

# 阶段1：编译，命名为builder
# 使用Maven镜像
# 因为protoc-gen-grpc-java二进制文件在Linux上使用glibc，所以使用alpine有一些问题
# FROM maven:3.9.8-eclipse-temurin-21-alpine AS builder
FROM maven:3.9.9-eclipse-temurin-21-jammy AS builder

# 设定alpine镜像仓库为国内源
# RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories
# 设定Ubuntu镜像仓库为国内源
RUN sed -i 's@//.*archive.ubuntu.com@//mirrors.aliyun.com@g' /etc/apt/sources.list

# 创建应用路径
RUN mkdir /opt/app
# 创建Maven设定路径
RUN mkdir -p /root/.m2
RUN mkdir /root/.m2/repository

# 设定Java用环境变量
# 开启Java21 分代ZGC [-XX:+UseZGC -XX:+ZGenerational]
ENV JAVA_TOOL_OPTIONS="-Duser.language=en -Dfile.encoding=UTF-8 -XX:+UseZGC -XX:+ZGenerational"

# 将本地文件复制到镜像中
# 复制src文件夹
COPY src /opt/app/JavaGrpc/src
# 复制pom.xml文件
COPY pom.xml /opt/app/JavaGrpc/pom.xml
COPY pom_docker.xml /opt/app/JavaGrpc/pom_docker.xml
# 复制Maven国内源设定
COPY ./shell/settings.xml /root/.m2/settings.xml

# 设置工作目录
WORKDIR /opt/app/JavaGrpc

# 编译工程
# RUN mvn -f pom_docker.xml clean compile assembly:single -P docker -Dmaven.test.skip=true
# --mount=type=cache 用于指定一个挂载点。这个挂载点不是挂载宿主机上的文件系统到容器中，而是利用 Docker 的构建缓存来优化构建过程
#RUN --mount=type=cache,target=/root/.m2/repository \
#    mvn -f pom_docker.xml clean compile assembly:single -P docker -Dmaven.test.skip=true
RUN --mount=type=cache,target=/root/.m2/repository \
    mvn -f pom_docker.xml clean package spring-boot:repackage -P docker -Dmaven.test.skip=true

WORKDIR /opt/app/JavaGrpc/build
# 下载 OpenTelemetry Java Agent 零代码插桩
ENV GITHUB_URL="https://bgithub.xyz"
RUN curl -Lo opentelemetry-javaagent.jar "${GITHUB_URL}/open-telemetry/opentelemetry-java-instrumentation/releases/download/v2.9.0/opentelemetry-javaagent.jar"

#---------------------------------------------------------------------

# 阶段2：运行
# 根据需要选择eclipse-temurin的基于alpine的jre环境
FROM eclipse-temurin:21.0.3_9-jre-alpine

# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 创建应用路径
RUN mkdir /opt/app

# 添加bash
RUN apk update --quiet
RUN apk add --no-cache --upgrade bash

# 从阶段1复制编译结果
COPY --from=builder /opt/app/JavaGrpc/build/javagrpc-1.0.jar /opt/app/JavaGrpc/javagrpc-1.0.jar
COPY --from=builder /opt/app/JavaGrpc/build/opentelemetry-javaagent.jar /opt/app/JavaGrpc/opentelemetry-javaagent.jar

# 设定Java用环境变量
# 开启Java21 分代ZGC [-XX:+UseZGC -XX:+ZGenerational]
ENV JAVA_TOOL_OPTIONS="-Duser.language=en -Dfile.encoding=UTF-8 -XX:+UseZGC -XX:+ZGenerational"
ENV JAVA_ENVIRONMENT="docker"
# 是否启用服务发现
ENV GRPC_SERVER_RESOLVE="false"
# gRPC服务绑定端口
ENV GRPC_SERVER_HTTP_PORTS="50051"
# gRPC服务名
ENV APP_SERVICE_NAME="JavaGrpcService"
# 是否启用OpenTelemetry遥测
ENV GRPC_SERVER_OTEL="false"
ENV OTEL_SERVICE_NAME="JavaGrpcService"
# Traces（追踪）的导出器
ENV OTEL_TRACES_EXPORTER="otlp"
# Metrics（指标/度量）的导出器
ENV OTEL_METRICS_EXPORTER="otlp"
# Logs（日志）的导出器
ENV OTEL_LOGS_EXPORTER="none"
# 所有遥测数据的 OTLP 传输协议
ENV OTEL_EXPORTER_OTLP_PROTOCOL="grpc"
# OpenTelemetry Collector的URL
ENV OTEL_EXPORTER_OTLP_ENDPOINT="http://host.docker.internal:4317"
# 零代码插桩-禁用所有
ENV OTEL_INSTRUMENTATION_COMMON_DEFAULT_ENABLED="false"
# 零代码插桩-启用JVM指标检测
ENV OTEL_INSTRUMENTATION_RUNTIME_TELEMETRY_ENABLED="true"

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 设置工作目录
WORKDIR /opt/app/JavaGrpc

# 声明容器运行时监听的特定网络端口
EXPOSE 50051

# 指定容器创建时的默认命令
# CMD ["java", "-jar", "/opt/app/JavaGrpc/javagrpc-1.0.jar"]
CMD ["java", "-javaagent:/opt/app/JavaGrpc/opentelemetry-javaagent.jar", "-jar", "/opt/app/JavaGrpc/javagrpc-1.0.jar"]
