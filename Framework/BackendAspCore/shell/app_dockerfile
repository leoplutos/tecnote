# 多阶段构建

# 阶段1：编译，命名为builder
# 使用alpine镜像
# FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS builder
# 使用Deiban12 Bookworm
FROM mcr.microsoft.com/dotnet/sdk:8.0-bookworm-slim AS builder

# 设定Debian12镜像仓库为国内源(DEB822格式)
RUN set -eux && sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list.d/debian.sources

# 创建应用路径
RUN mkdir /opt/app

# 将本地文件复制到镜像中
# 复制所有
COPY . /opt/app/BackendAspCore/

# 添加nuget国内源
RUN dotnet nuget add source https://nuget.cdn.azure.cn/v3/index.json -n nuget_cn
# 禁用默认源
RUN dotnet nuget disable source nuget.org

# 设置工作目录
WORKDIR /opt/app/BackendAspCore/AspWebapi

# 安装依赖
RUN dotnet clean
# 编译工程（在/opt/app/BackendAspCore/target下会编译出结果）
# 开启单文件发布，将运行时包含在发布文件内，不生成pdb文件
RUN --mount=type=cache,target=/root/.nuget/packages \
    dotnet publish -c Release -o target -p:PublishSingleFile=true -p:DebugType=none -p:DebugSymbols=false --self-contained true

#---------------------------------------------------------------------

# 阶段2：运行
## 发布时未包含运行时的话需要选择带运行时的镜像
## FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine
FROM debian:bookworm-slim

# 设定Debian12镜像仓库为国内源(DEB822格式)
RUN set -eux && sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list.d/debian.sources

# 创建应用路径
RUN mkdir /opt/app

# 添加curl和dotnet8的依赖项
# https://github.com/dotnet/core/blob/main/release-notes/8.0/linux-packages.md
# https://github.com/dotnet/dotnet-docker/tree/main/src/runtime-deps
# https://github.com/dotnet/dotnet-docker/blob/main/src/runtime-deps/8.0/bookworm-slim/amd64/Dockerfile
RUN apt -qq update -y && apt -qq upgrade -y
RUN apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        libc6 \
        libgcc-s1 \
        libicu72 \
        libssl3 \
        libstdc++6 \
        tzdata \
        zlib1g

# 从阶段1复制编译结果
COPY --from=builder /opt/app/BackendAspCore/AspWebapi/target /opt/app/BackendAspCore/

# 设定环境变量
ENV ASPNETCORE_HTTP_PORTS=9501

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 设置工作目录
WORKDIR /opt/app/BackendAspCore/

# 声明容器运行时监听的特定网络端口
EXPOSE 9501

# 指定容器创建时的默认命令
# CMD ["dotnet", "AspWebapi.dll"]
CMD ["./AspWebapi"]

# 启动命令
# docker run -d \
#  -p 9501:9501 \
#  -e ASPNETCORE_HTTP_PORTS=9501 \
#  --name aspcore_9501 \
#  backend_aspwebapi:latest
