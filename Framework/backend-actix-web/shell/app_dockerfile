# 阶段1：编译，命名为builder
# Rust 编译的二进制文件动态链接到 libc 库，可以正常运行于 Ubuntu、Debian 和 Fedora 之类的镜像中，但不能运行于 Alpine 中
# 因为 Alpine 使用的是 musl 而不是 glibc ，所以要在 Alpine 中运行的话编译环境也最好是 Alpine
# FROM rust:1.79-slim-bookworm AS builder
FROM rust:1.79.0-alpine3.20 AS builder

# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories

# 创建应用路径
RUN mkdir /opt/app

# 使用alpine镜像编译的话，如果编译和运行的环境不一致，会报openssl的问题
RUN apk add -q --update-cache --no-cache build-base openssl-dev cmake

# 在容器内部设置环境变量
ENV RUSTFLAGS="-C target-feature=-crt-static"

# 将本地文件复制到镜像中
# 复制src文件夹
COPY src /opt/app/backend-actix-web/src
# 复制Cargo.toml文件
COPY Cargo.toml /opt/app/backend-actix-web/Cargo.toml
# 复制config.toml文件到$CARGO_HOME（设置国内源）
COPY ./shell/config.toml /usr/local/cargo/config.toml

# 设置工作目录
WORKDIR /opt/app/backend-actix-web

# 编译工程
RUN set -eux
RUN cargo build --release

#---------------------------------------------------------------------

# 阶段2：运行
## 根据需要选择alpine
FROM alpine:3.20

# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories

# 创建应用路径
RUN mkdir /opt/app

# 添加bash等
RUN apk update --quiet
RUN apk add --no-cache --upgrade bash
RUN apk add -q --no-cache libgcc tini curl openssl

# 从阶段1复制编译结果
COPY --from=builder /opt/app/backend-actix-web/target/release/backend-actix-web /opt/app/backend-actix-web/backend-actix-web

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 设置工作目录
WORKDIR /opt/app/backend-actix-web

# 声明容器运行时监听的特定网络端口
EXPOSE 9501

# 指定容器创建时的默认命令
CMD ["./backend-actix-web"]
