@page "/Account/Login"
@layout FullStackBlazor.Components.Account.Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FullStackBlazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>登录</PageTitle>

<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
	<div class="col-md-4">
		<section class="border p-4 rounded shadow-sm bg-light">
			<h1 class="text-center">文件管理系统</h1>
			<StatusMessage Message="@errorMessage" />
			<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
				<DataAnnotationsValidator />
				<h2 class="text-center">使用本地账号登录</h2>
				<hr />
				<ValidationSummary class="text-danger" role="alert" />
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username"
						aria-required="true" placeholder="name@example.com" />
					<label for="email" class="form-label">Email</label>
					<ValidationMessage For="() => Input.Email" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText type="password" @bind-Value="Input.Password" class="form-control"
						autocomplete="current-password" aria-required="true" placeholder="password" />
					<label for="password" class="form-label">Password</label>
					<ValidationMessage For="() => Input.Password" class="text-danger" />
				</div>
				<div class="checkbox mb-3">
					<label class="form-label">
						<InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
						记住我
					</label>
				</div>
				<button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>

				<div class="mt-3 text-center">
					<p> <a href="Account/ForgotPassword">忘记密码?</a> </p>
					<p> <a
							href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">注册账号</a>
					</p>
					<p> <a href="Account/ResendEmailConfirmation">重新发送电子邮件确认</a> </p>
				</div>
			</EditForm>
		</section>
		<!--
		<section>
			<h3>使用其他服务认证</h3>
			<hr />
			<ExternalLoginPicker />
		</section>
		-->
	</div>
</div>

@code {
	private string? errorMessage;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			// Clear the existing external cookie to ensure a clean login process
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	public async Task LoginUser()
	{
		var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
		false);
		if (result.Succeeded)
		{
			Logger.LogInformation("登录成功");
			RedirectManager.RedirectTo("Dashboard");
		}
		else if (result.RequiresTwoFactor)
		{
			RedirectManager.RedirectTo(
			"Account/LoginWith2fa",
			new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("Account/Lockout");
		}
		else
		{
			errorMessage = "Error: Invalid login attempt.";
		}
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; } = "admin@exsample.com"; // 设置默认值

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		[Display(Name = "Remember me?")]
		public bool RememberMe { get; set; }
	}
}
