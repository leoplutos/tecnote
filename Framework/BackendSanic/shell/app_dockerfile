# Python 版本
# slim 镜像一般都基于 Debian 和 glibc，删除了许多非必需的软件包，优化了体积
# FROM python:3.12.4-slim-bookworm
FROM python:3.12.5-alpine3.20

# 设定debian12镜像仓库为国内源
# RUN set -eux && sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/debian.sources
# 设定alpine镜像仓库为国内源
RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories

# 构建时变量，仅在构建Docker映像期间可用
ARG registry=https://mirrors.aliyun.com/pypi/simple/

# 设置环境变量
ENV SANIC_ENVIRONMENT=production
ENV SANIC_HTTP_PORT=9501

# 创建应用路径
RUN mkdir /opt/app

# 添加bash
RUN apk update --quiet
RUN apk add --no-cache --upgrade bash

# 将本地文件复制到镜像中
# 复制src文件夹
COPY src /opt/app/BackendSanic/src
# 复制pyproject.toml文件
COPY pyproject.toml /opt/app/BackendSanic/pyproject.toml
# 必须有README.md，不然poetry install会报警告
COPY README.md /opt/app/BackendSanic/README.md

# 安装 Poetry，开启缓存，加速下载依赖
RUN --mount=type=cache,target=/root/.cache/pip pip install poetry -i $registry
RUN poetry config virtualenvs.in-project true

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 设置工作目录
WORKDIR /opt/app/BackendSanic

# 安装 Python 依赖
RUN poetry install

# 声明容器运行时监听的特定网络端口
EXPOSE 9501

# 指定容器创建时的默认命令
# CMD ["poetry", "run", "sanic", "src.backendsanic.server:app", "--fast", "--no-repl", "--host=0.0.0.0", "--port=${SANIC_HTTP_PORT}"]
CMD ["sh", "-c", "poetry run  sanic src.backendsanic.server:app --fast --no-repl --host=0.0.0.0 --port=${SANIC_HTTP_PORT}"]
