# 普通构建
## 根据需要选择不同版本的 Golang 版
# FROM golang:1.22.5-bookworm
FROM golang:1.22.5-alpine

# 创建应用路径
RUN mkdir /opt/app
# 如果需要bash（Alpine默认不带bash）
#RUN apk add --no-cache --upgrade bash

# 设置环境变量
ENV CGO_ENABLED=0
ENV GIN_MODE=release

# Go语言设定
RUN go env -w GO111MODULE=on
RUN go env -w GOPROXY=https://goproxy.cn,direct

# 将本地文件复制到镜像中
# 复制src文件夹
COPY src /opt/app/BackendGin/src
# 复制所有以config开头的.yaml文件
COPY config*.yaml /opt/app/BackendGin
# 复制go.mod文件
COPY go.mod /opt/app/BackendGin/go.mod

# 个人习惯定制化
RUN echo 'PS_GREEN="\[\033[0;32m\]"' >> /root/.bashrc
RUN echo 'PS_YELLOW="\[\033[0;33m\]"' >> /root/.bashrc
RUN echo 'PS_BLUE="\[\033[0;34m\]"' >> /root/.bashrc
RUN echo 'PS_MAGENTA="\[\033[0;35m\]"' >> /root/.bashrc
RUN echo 'PS_CLEAR="\[\033[0m\]"' >> /root/.bashrc
RUN echo 'export PS1="${PS_GREEN}[Container]${PS_MAGENTA}\u@\h${PS_CLEAR}:${PS_YELLOW}\w${PS_CLEAR}\n${PS_BLUE}\$ ${PS_CLEAR}"' >> /root/.bashrc
RUN echo 'alias ll="ls -hl --full-time --color=auto"' >> /root/.bashrc

# 设置工作目录
WORKDIR /opt/app/BackendGin

RUN go mod tidy
# 编译工程
## -ldflags
## -w：去掉 dwarf 调试信息。会减小可执行文件的大小。
## -s：去掉符号表信息。会进一步减小可执行文件的大小。
RUN go build -ldflags "-w -s" -o ./bin/backendgin ./src/main.go

# 声明容器运行时监听的特定网络端口
EXPOSE 9501

# 指定容器创建时的默认命令
CMD ["./bin/backendgin"]
