{
	"include_sys_header": {
		"prefix": ["in", "inc"],
		"body": [
			"#include <${1|stdio.h,stdlib.h,string.h,errno.h|}>$0"
		],
		"description": "include system header"
	},
	"include_user_header": {
		"prefix": ["inu"],
		"body": [
			"#include \"${1:user.h}\"$0"
		],
		"description": "include user header"
	},
	"define": {
		"prefix": ["de", "def"],
		"body": [
			"#define ${1:/* name */} ${2:/* value */}$0"
		],
		"description": "define"
	},
	"ifdef": {
		"prefix": ["id", "ifd"],
		"body": [
			"#ifdef ${1:/* name */}",
			"\t${2:/* code */}",
			"#endif$0"
		],
		"description": "ifdef"
	},
	"if_condition": {
		"prefix": ["if"],
		"body": [
			"if (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"}$0"
		],
		"description": "if condition"
	},
	"if_else_condition": {
		"prefix": ["ie", "ife"],
		"body": [
			"if (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"} else {",
			"\t${3:/* code */}",
			"}$0"
		],
		"description": "if-else condition"
	},
	"if_else_if_condition": {
		"prefix": ["ii", "iei"],
		"body": [
			"if (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"} else if (${3:/* condition */}) {",
			"\t${4:/* code */}",
			"} else {",
			"\t${5:/* code */}",
			"}$0"
		],
		"description": "if-else-if condition"
	},
	"switch_condition": {
		"prefix": ["sw", "swi"],
		"body": [
			"switch (${1:/* expression */}) {",
			"\tcase ${2:/* constant-expression */}:",
			"\t\t${3:/* code */}",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}$0"
		],
		"description": "switch condition"
	},
	"while_loop": {
		"prefix": ["wh", "whi"],
		"body": [
			"while (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"}$0"
		],
		"description": "while loop"
	},
	"for_loop": {
		"prefix": ["fo", "for"],
		"body": [
			"int i;",
			"for (i = 0; i < ${1:count}; i++) {",
			"\t${2:/* code */}",
			"}$0"
		],
		"description": "for loop"
	},
	"struct_block": {
		"prefix": ["st", "str"],
		"body": [
			"struct ${1:struct_name} {",
			"\t${2:/* code */}",
			"};$0"
		],
		"description": "struct block"
	},
	"enum_block": {
		"prefix": ["en", "enu"],
		"body": [
			"enum ${1:enum_name} {",
			"\t${2:/* code */}",
			"};$0"
		],
		"description": "enum block"
	},
	"function_block": {
		"prefix": ["fu", "fun"],
		"body": [
			"int ${1:function_name}(int ${2:arguments}) {",
			"\t${3:/* code */}",
			"\treturn 0;",
			"}$0"
		],
		"description": "function block"
	},
	"main_function_block": {
		"prefix": ["ma", "mai"],
		"body": [
			"/* #include <stdio.h> */",
			"int main (int argc, char *argv[]) {",
			"\t${1:/* code */}",
			"\treturn 0;",
			"}$0"
		],
		"description": "main function block"
	},
	"logc_define": {
		"prefix": ["logd"],
		"body": [
			"/* #include \"log.h\" */",
			"",
			"log_set_level(0);",
			"log_set_quiet(0);",
			"FILE *${1|debug,trace,info,warn,error,fatal|}_log_file;",
			"$1_log_file = fopen(\"./${TM_FILENAME_BASE}_$1.log\", \"ab\");",
			"if ($1_log_file == NULL) {",
			"\treturn 6;",
			"}",
			"log_add_fp($1_log_file, LOG_${2|DEBUG,TRACE,INFO,WARN,ERROR,FATAL|});",
			"",
			"${3:/* code */}",
			"",
			"fclose($1_log_file);$0"
		],
		"description": "logc define"
	},
	"logc_print": {
		"prefix": ["log", "logp"],
		"body": [
			"log_${1|debug,trace,info,warn,error,fatal|}(\"${2:variable}:[%${3|s,d,p,f,ld,lf,c|}]\", ${2:variable});$0"
		],
		"description": "logc print"
	},
	"printf": {
		"prefix": ["pr", "pri"],
		"body": [
			"printf(\"[${1|DEBUG,INFO,WARN,ERROR,FATAL|}] [%s at line:%d] - ${2:variable}:[%${3|s,d,p,f,ld,lf,c|}] \\n\", __func__, __LINE__, ${2:variable});$0"
		],
		"description": "printf"
	},
	"fprintf_stderr": {
		"prefix": ["pe", "pre"],
		"body": [
			"fprintf(stderr, \"[${1|ERROR,FATAL,DEBUG,INFO,WARN|}] [%s at line:%d] - ${2:variable}:[%${3|s,d,p,f,ld,lf,c|}] \\n\", __func__, __LINE__, ${2:variable});$0"
		],
		"description": "fprintf stderr"
	},
	"print_sqlca_ecpg": {
		"prefix": ["ps", "prs"],
		"body": [
			"printf(\"[${1|DEBUG,INFO,WARN,ERROR,FATAL|}] [%s at line:%d] - sqlcode:[%ld] sqlstate:[%s] sqlerrm.sqlerrmc:[%s]\\n\", __func__, __LINE__, sqlca.sqlcode, sqlca.sqlstate, sqlca.sqlerrm.sqlerrmc);$0"
		],
		"description": "print sqlca for ecpg"
	},
	"comment_block": {
		"prefix": ["co", "com"],
		"body": [
			"/**************************************************************",
			" * System:         $1",
			" * Description:    $2",
			" * GreatDate:      $3",
			" * Author:         $4",
			" * UpdateDate:     $5",
			" **************************************************************/$0"
		],
		"description": "comment block"
	},
	"malloc_block": {
		"prefix": ["mal", "mall"],
		"body": [
			"/* #include <stdlib.h> */",
			"/* #include <string.h> */",
			"char *p_ptr;",
			"p_ptr = malloc(${1:from_buf_size} + 1);",
			"if (p_ptr == NULL) {",
			"\tfprintf(stderr, \"[ERROR] [%s at line:%d] - FATAL:Out of memory!\\n\" , __func__, __LINE__);",
			"\treturn 6;",
			"}",
			"memcpy(p_ptr, ${2:from_buf}, ${1:from_buf_size});",
			"p_ptr[${1:from_buf_size}] = '\\0';",
			"",
			"${3:/* use p_ptr here */}",
			"",
			"free(p_ptr);",
			"p_ptr = NULL;$0"
		],
		"description": "malloc block"
	}
}
