{
	"import_package": {
		"prefix": ["us", "use"],
		"body": [
			"use ${1:/* package */};$0"
		],
		"description": "import package"
	},
	"if_condition": {
		"prefix": ["if"],
		"body": [
			"if ${1:/* condition */} {",
			"    ${2:/* code */}",
			"}$0"
		],
		"description": "if condition"
	},
	"if_else_condition": {
		"prefix": ["ie", "ife"],
		"body": [
			"if ${1:/* condition */} {",
			"    ${2:/* code */}",
			"} else {",
			"    ${3:/* code */}",
			"}$0"
		],
		"description": "if-else condition"
	},
	"if_else_if_condition": {
		"prefix": ["ii", "iei"],
		"body": [
			"if ${1:/* condition */} {",
			"    ${2:/* code */}",
			"} else if ${3:/* condition */} {",
			"    ${4:/* code */}",
			"} else {",
			"    ${5:/* code */}",
			"}$0"
		],
		"description": "if-else-if condition"
	},
	"match_condition": {
		"prefix": ["sw", "swi"],
		"body": [
			"match ${1:/* expression */} {",
			"    ${2:condition1} => ${3:/* expression */},",
			"    ${4:condition2} => {",
			"        ${5:/* code */}",
			"    },",
			"    _ => ${6:/* expression */},",
			"}$0"
		],
		"description": "match condition"
	},
	"while_loop": {
		"prefix": ["wh", "whi"],
		"body": [
			"while ${1:/* condition */} {",
			"    ${2:/* code */}",
			"}$0"
		],
		"description": "while loop"
	},
	"loop_loop": {
		"prefix": ["lo", "loo"],
		"body": [
			"loop {",
			"    ${1:/* code */}",
			"    break;",
			"}$0"
		],
		"description": "loop loop"
	},
	"for_loop": {
		"prefix": ["fo", "for"],
		"body": [
			"for ${1|i,_|} in 0..=${2:count} {",
			"    ${3:/* code */}",
			"}$0"
		],
		"description": "for loop"
	},
	"for_each_loop": {
		"prefix": ["fe", "fore"],
		"body": [
			"for ${1:element} in &mut &${2:list} {",
			"    ${3:/* code */}",
			"}$0"
		],
		"description": "for each loop"
	},
	"let_match": {
		"prefix": ["re", "lm"],
		"body": [
			"let mut ${1:type} = match ${1:type} {",
			"    Ok(${2:type}) => ${2:type},",
			"    Err(error) => {",
			"        return Err(e)",
			"    },",
			"};$0"
		],
		"description": "let match"
	},
	"struct_block": {
		"prefix": ["st"],
		"body": [
			"struct ${1:struct_name} {",
			"    ${2:field}: ${3:type},",
			"}$0"
		],
		"description": "struct block"
	},
	"enum_block": {
		"prefix": ["en", "enu"],
		"body": [
			"enum ${1:enum_name} {",
			"    ${2:/* code */}",
			"}$0"
		],
		"description": "enum block"
	},
	"string_block": {
		"prefix": ["str", "sr"],
		"body": [
			"let ${1:variable} = String::from(\"${2:value}\");$0"
		],
		"description": "string block"
	},
	"tuple_block": {
		"prefix": ["tu", "tup"],
		"body": [
			"let ${1:variable}: (${2|u8,u16,u32,u64,u128,i8,i16,i32,i64,i128,usize,isize|}, $2) = (${3:500}, ${4:321});$0"
		],
		"description": "tuple block"
	},
	"vector_block": {
		"prefix": ["li", "ve"],
		"body": [
			"let mut ${1:variable} = Vec::new();",
			"${1}.push(${2:value});$0"
		],
		"description": "vector block"
	},
	"hashmap_block": {
		"prefix": ["mp", "map"],
		"body": [
			"let mut ${1:variable} = HashMap::new();",
			"$1.insert(\"${2:key}\", ${3:value});$0"
		],
		"description": "hashmap block"
	},
	"function_block": {
		"prefix": ["fu", "fun"],
		"body": [
			"fn ${1:function_name}(${2:arguments}: ${3:args_type}) -> ${4:return_type} {",
			"    ${5:/* code */}",
			"}$0"
		],
		"description": "function block"
	},
	"main_function_block": {
		"prefix": ["ma", "mai"],
		"body": [
			"fn main() {",
			"    ${1:/* code */}",
			"}$0"
		],
		"description": "main function block"
	},
	"method_block": {
		"prefix": ["me", "met"],
		"body": [
			"struct ${1:struct_name} {",
			"    ${2:field}: ${3:type},",
			"}",
			"",
			"impl $1 {",
			"    fn new(${2}: ${3}) -> $1 {",
			"        $1 {",
			"            $2: $2,",
			"        }",
			"    }",
			"    fn ${4:method_name}(&self) -> ${5:return_type} {",
			"        ${6:/* code */}",
			"    }",
			"}$0"
		],
		"description": "method block"
	},
	"associated_functions_block": {
		"prefix": ["af"],
		"body": [
			"struct ${1:struct_name} {",
			"    ${2:field}: ${3:type},",
			"}",
			"",
			"impl $1 {",
			"    fn new(${2}: ${3}) -> $1 {",
			"        $1 {",
			"            $2: $2,",
			"        }",
			"    }",
			"}$0"
		],
		"description": "associated functions block"
	},
	"trait_block": {
		"prefix": ["tr", "it"],
		"body": [
			"${1:pub} trait ${2:trait_name} {",
			"    fn ${3:method_name}(&self) -> ${4:return_type};",
			"}$0"
		],
		"description": "trait block"
	},
	"impl_block": {
		"prefix": ["im", "imp"],
		"body": [
			"impl ${1:trait_name} for ${2:struct_name} {",
			"    ${3:/* code */}",
			"}$0"
		],
		"description": "impl block"
	},
	"allow_macro": {
		"prefix": ["al", "all"],
		"body": [
			"#[allow(${1|unused_imports,dead_code,unused_variables,non_snake_case|})]$0"
		],
		"description": "allow macro"
	},
	"as_block": {
		"prefix": ["as"],
		"body": [
			"as ${1|u8,u16,u32,u64,u128,i8,i16,i32,i64,i128,usize,isize|}$0"
		],
		"description": "as block"
	},
	"assert_block": {
		"prefix": ["ass"],
		"body": [
			"assert!($1);$0"
		],
		"description": "assert block"
	},
	"assert_eq_block": {
		"prefix": ["ase"],
		"body": [
			"assert_eq!($1, $2);$0"
		],
		"description": "assert eq block"
	},
	"assert_ne_block": {
		"prefix": ["asn"],
		"body": [
			"assert_ne!($1, $2);$0"
		],
		"description": "assert ne block"
	},
	"derive_macro": {
		"prefix": ["de", "der"],
		"body": [
			"#[derive(${1|Debug,Copy,Clone,Default,Eq,Hash,Ord,PartialEq,PartialOrd|})]$0"
		],
		"description": "derive macro"
	},
	"println": {
		"prefix": ["pr", "pri"],
		"body": [
			"println!(\"[${1|DEBUG,INFO,WARN,ERROR,FATAL|}] - ${2:variable}:{}\", $2);$0"
		],
		"description": "println"
	},
	"eprintln": {
		"prefix": ["pe", "pre"],
		"body": [
			"eprintln!(\"[${1|ERROR,FATAL,DEBUG,INFO,WARN|}] - ${2:variable}:{}\", $2);$0"
		],
		"description": "eprintln"
	},
	"comment_block": {
		"prefix": ["co", "com"],
		"body": [
			"/**************************************************************",
			" * System:         $1",
			" * Description:    $2",
			" * GreatDate:      $3",
			" * Author:         $4",
			" * UpdateDate:     $5",
			" **************************************************************/$0"
		],
		"description": "comment block"
	}
}
