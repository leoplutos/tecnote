{
	"shebang_block": {
		"prefix": ["he"],
		"body": [
			"#!/usr/bin/python3",
			"# coding=utf-8",
			"$1"
		],
		"description": "shebang block"
	},
	"from-import_module": {
		"prefix": ["fr", "fro"],
		"body": [
			"from ${1:py_file_name(module)} import ${2:function_name}$0"
		],
		"description": "from import module"
	},
	"import_module": {
		"prefix": ["im", "imp"],
		"body": [
			"import ${1:py_file_name(module)}$0"
		],
		"description": "import module"
	},
	"if_condition": {
		"prefix": ["if"],
		"body": [
			"if ${1:condition}:",
			"    ${2:#code}",
			"$0"
		],
		"description": "if condition"
	},
	"if_else_condition": {
		"prefix": ["ie", "ife"],
		"body": [
			"if ${1:condition}:",
			"    ${2:#code}",
			"else:",
			"    ${3:#code}",
			"$0"
		],
		"description": "if-else condition"
	},
	"if_else_if_condition": {
		"prefix": ["ii", "iei"],
		"body": [
			"if ${1:condition}:",
			"    ${2:#code}",
			"elif ${3:condition}:",
			"    ${4:#code}",
			"else:",
			"    ${5:#code}",
			"$0"
		],
		"description": "if-else-if condition"
	},
	"match_condition": {
		"prefix": ["sw", "swi"],
		"body": [
			"match ${1:expression}:",
			"    case ${2:condition}:",
			"        ${3:#code}",
			"    case _:",
			"        ${4:#code}",
			"$0"
		],
		"description": "match condition requried:3.10"
	},
	"while_loop": {
		"prefix": ["wh", "whi"],
		"body": [
			"while ${1:condition}:",
			"    ${2:#code}",
			"$0"
		],
		"description": "while loop"
	},
	"for_loop": {
		"prefix": ["fo", "for"],
		"body": [
			"for i in range(${1:count}):",
			"    ${2:#code}",
			"$0"
		],
		"description": "for loop"
	},
	"for_each_loop": {
		"prefix": ["fe", "fore"],
		"body": [
			"for ${1:element} in ${2:list}:",
			"    ${3:#code}",
			"$0"
		],
		"description": "for each loop"
	},
	"try_except_block": {
		"prefix": ["tr", "try"],
		"body": [
			"try:",
			"    ${1:#code}",
			"except:",
			"    ${2:#import traceback}",
			"    traceback.print_exc()",
			"$0"
		],
		"description": "try except block"
	},
	"try-except-finally_block": {
		"prefix": ["tf", "tryf"],
		"body": [
			"try:",
			"    ${1:#code}",
			"except:",
			"    ${2:# import traceback}",
			"    traceback.print_exc()",
			"finally:",
			"    ${3:#code}",
			"$0"
		],
		"description": "try except finally block"
	},
	"list_block": {
		"prefix": ["li", "lis"],
		"body": [
			"${1:variable} = [${2:1}, ${3:2}, ${4:3}]$0"
		],
		"description": "list block"
	},
	"tuple_block": {
		"prefix": ["tu", "tup"],
		"body": [
			"${1:variable} = (${2:'Apple'}, ${3:'Orange'}, ${4:123})$0"
		],
		"description": "tuple block"
	},
	"dictionary_block": {
		"prefix": ["di", "dic"],
		"body": [
			"${1:variable} = {${2:'key1'}: ${3:'value1'}, ${4:'key2'}: ${5:123}}$0"
		],
		"description": "dictionary block"
	},
	"set_block": {
		"prefix": ["se", "set"],
		"body": [
			"${1:variable} = set((${2:'Apple'}, ${3:'Orange'}, ${4:'Banana'}))$0"
		],
		"description": "set block"
	},
	"class_block": {
		"prefix": ["cl", "cla"],
		"body": [
			"class ${1:class_name}(object):",
			"    def __init__(self, ${2:field}: int) -> None:",
			"        self.__${2:field} = ${2:field}",
			"",
			"    def ${3:function_name}(self) -> None:",
			"        ${4:#code}",
			"$0"
		],
		"description": "class block"
	},
	"interface_block": {
		"prefix": ["it", "inter"],
		"body": [
			"import abc",
			"class ${1:interface_name}(metaclass=abc.ABCMeta):",
			"",
			"    @abc.abstractmethod",
			"    def ${2:function_name}(self) -> None:",
			"        ${3:#code}",
			"$0"
		],
		"description": "interface block"
	},
	"function_block": {
		"prefix": ["fu", "fun"],
		"body": [
			"def ${1:function_name}(${2:argument: int = 0}) -> None:",
			"    ${3:#code}",
			"$0"
		],
		"description": "function block"
	},
	"main_function_block": {
		"prefix": ["ma", "mai"],
		"body": [
			"def main() -> None:",
			"    ${1:#code}",
			"",
			"if __name__ == \"__main__\":",
			"    main()",
			"$0"
		],
		"description": "main function block"
	},
	"log_define": {
		"prefix": ["logd"],
		"body": [
			"import logging",
			"",
			"logging.basicConfig(",
			"    level=logging.${1|DEBUG,INFO,WARN,ERROR,FATAL|},",
			"    format='%(asctime)s %(levelname)s [%(process)s] %(filename)s:%(lineno)d - %(message)s',",
			")",
			"# logging.basicConfig(",
			"#    handlers=[",
			"#        logging.FileHandler(filename=\"./${2:log_file_name}_${3|debug,info,warn,error,fatal|}.log\", encoding='utf-8', mode='a+')",
			"#    ],",
			"#    level=logging.$1,",
			"#    format='%(asctime)s %(levelname)s [%(process)s] %(filename)s:%(lineno)d - %(message)s',",
			"# )",
			"$0"
		],
		"description": "log define"
	},
	"log_print": {
		"prefix": ["log", "logp"],
		"body": [
			"logging.${1|debug,info,warn,error,fatal|}(f\"${2:variable}:{${2:variable}}\")$0"
		],
		"description": "log print"
	},
	"print": {
		"prefix": ["pr", "pri"],
		"body": [
			"print(f\"[${1|DEBUG,INFO,WARN,ERROR,FATAL|}] [{__name__}] - ${2:variable}:{${2:variable}}\")$0"
		],
		"description": "print"
	},
	"print_stderr": {
		"prefix": ["pe", "pre"],
		"body": [
			"print(f\"[${1|ERROR,FATAL,DEBUG,INFO,WARN|}] [{__name__}] - ${2:variable}:{${2:variable}}\", file=sys.stderr)$0"
		],
		"description": "print stderr"
	},
	"comment_block": {
		"prefix": ["co", "com"],
		"body": [
			"\"\"\"",
			"  System:         $1",
			"  Description:    $2",
			"  GreatDate:      $3",
			"  Author:         $4",
			"  UpdateDate:     $5",
			"\"\"\"$0"
		],
		"description": "comment block"
	}
}
