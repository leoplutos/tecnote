{
	"import_package": {
		"prefix": ["im", "imp"],
		"body": [
			"import ${1:/* package */};$0"
		],
		"description": "import package"
	},
	"if_condition": {
		"prefix": ["if"],
		"body": [
			"if (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"}$0"
		],
		"description": "if condition"
	},
	"if_else_condition": {
		"prefix": ["ie", "ife"],
		"body": [
			"if (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"} else {",
			"\t${3:/* code */}",
			"}$0"
		],
		"description": "if-else condition"
	},
	"if_else_if_condition": {
		"prefix": ["ii", "iei"],
		"body": [
			"if (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"} else if (${3:/* condition */}) {",
			"\t${4:/* code */}",
			"} else {",
			"\t${5:/* code */}",
			"}$0"
		],
		"description": "if-else-if condition"
	},
	"switch_condition": {
		"prefix": ["sw", "swi"],
		"body": [
			"switch (${1:/* expression */}) {",
			"\tcase ${2:/* constant-expression */}:",
			"\t\t${3:/* code */}",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}$0"
		],
		"description": "switch condition"
	},
	"while_loop": {
		"prefix": ["wh", "whi"],
		"body": [
			"while (${1:/* condition */}) {",
			"\t${2:/* code */}",
			"}$0"
		],
		"description": "while loop"
	},
	"while_iterator_loop": {
		"prefix": ["wi"],
		"body": [
			"Iterator<${1:type}> it = ${2:list}.iterator();",
			"while (it.hasNext()) {",
			"\t${1:type} ${3:element} = it.next();",
			"\t${4:/* code */}",
			"}$0"
		],
		"description": "while iterator loop"
	},
	"for_loop": {
		"prefix": ["fo", "for"],
		"body": [
			"for (int i = 0; i < ${1:count}; i++) {",
			"\t${2:/* code */}",
			"}$0"
		],
		"description": "for loop"
	},
	"for_each_loop": {
		"prefix": ["fe", "fore"],
		"body": [
			"for (${1:type} ${2:element} : ${3:list}) {",
			"\t${4:/* code */}",
			"}$0"
		],
		"description": "for each loop"
	},
	"try_catch_block": {
		"prefix": ["tr", "try"],
		"body": [
			"try {",
			"\t${1:/* code */}",
			"} catch (Exception e) {",
			"\t${2:e.printStackTrace();}",
			"}$0"
		],
		"description": "try catch block"
	},
	"try_catch_finally_block": {
		"prefix": ["tf", "tryf"],
		"body": [
			"try {",
			"\t${1:/* code */}",
			"} catch (Exception e) {",
			"\t${2:e.printStackTrace();}",
			"} finally {",
			"\t${3:/* code */}",
			"}$0"
		],
		"description": "try catch finally block"
	},
	"list_block": {
		"prefix": ["li", "lis"],
		"body": [
			"List<${1:type}> ${2:variable} = new ArrayList<${1:type}>();$0"
		],
		"description": "list block"
	},
	"map_block": {
		"prefix": ["mp", "map"],
		"body": [
			"Map<${1:key_type}, ${2:value_type}> ${3:variable} = new LinkedHashMap<${1:key_type}, ${2:value_type}>();$0"
		],
		"description": "map block"
	},
	"class_block": {
		"prefix": ["cl", "cla"],
		"body": [
			"${1|public,private,abstract,final|} class ${2:class_name} {",
			"\t${3:/* code */}",
			"}$0"
		],
		"description": "class block"
	},
	"interface_block": {
		"prefix": ["it", "inter"],
		"body": [
			"${1|public,private,abstract,final|} interface ${2:interface_name} {",
			"\t${3:/* code */}",
			"}$0"
		],
		"description": "interface block"
	},
	"field_block": {
		"prefix": ["fi", "fie"],
		"body": [
			"${1|private,public,abstract,final|} ${2:type} ${3:field_name};$0"
		],
		"description": "field block"
	},
	"function_block": {
		"prefix": ["fu", "fun"],
		"body": [
			"${1|public,private,protected,final|} ${2:void} ${3:function_name}(${4:type} ${5:arguments}) {",
			"\t${6:/* code */}",
			"}$0"
		],
		"description": "function block"
	},
	"main_function_block": {
		"prefix": ["ma", "mai"],
		"body": [
			"public static void main(String[] args) throws Exception {",
			"\t${1:/* code */}",
			"}$0"
		],
		"description": "main function block"
	},
	"log4j_define": {
		"prefix": ["logd"],
		"body": [
			"protected final Logger log = Logger.getLogger(this.getClass());$0"
		],
		"description": "log4j define"
	},
	"log4j_print": {
		"prefix": ["log", "logp"],
		"body": [
			"log.${1|debug,info,warn,error,fatal|}(\"${2:message}\", ${3:exception});$0"
		],
		"description": "log4j print"
	},
	"printf": {
		"prefix": ["pr", "pri"],
		"body": [
			"System.out.printf(\"[${1|DEBUG,INFO,WARN,ERROR,FATAL|}] - ${2:variable}:[%${3|s,d,p,f,ld,lf,c|}] \\n\", ${2:variable});$0"
		],
		"description": "printf"
	},
	"printf_stderr": {
		"prefix": ["pe", "pre"],
		"body": [
			"System.err.printf(\"[${1|ERROR,FATAL,DEBUG,INFO,WARN|}] - ${2:variable}:[%${3|s,d,p,f,ld,lf,c|}] \\n\", ${2:variable});$0"
		],
		"description": "printf stderr"
	},
	"comment_block": {
		"prefix": ["co", "com"],
		"body": [
			"/**************************************************************",
			" * System:         $1",
			" * Description:    $2",
			" * GreatDate:      $3",
			" * Author:         $4",
			" * UpdateDate:     $5",
			" **************************************************************/$0"
		],
		"description": "comment block"
	}
}
